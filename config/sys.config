[
{in,[
    {incoming_protocols, [

        %% Ranch Example 1
        %% IPv4
        %% no Backpressure example '{active, true}'
        %% 10 acceptor pool
        {protocol,[
            {type, ranch_tcp_ipv4},
            {unique_reference, ranch_tcp_ipv4_1},
            {tcp_v4_port, 9900},
            {num_acceptors, 10},
            {socket_opts, [
                {packet, 2},
                {delay_send, false},
                {keepalive, true},
                {linger, {true, 1}},
                {show_econnreset, true},
                {active, true}
            ]}
        ]},

        %% Ranch Example 2
        %% IPv4
        %% active once example, illustrating back pressure
        %% rate_limited Ms between {tcp, Socket, Data} receives.
        {protocol,[
            {type, ranch_tcp_ipv4},
            {unique_reference, ranch_tcp_ipv4_2},
            {tcp_v4_port, 9901},
            {num_acceptors, 10},
            {rate_limited, 5000},
            {socket_opts, [
                {packet, 2},
                {delay_send, false},
                {keepalive, true},
                {linger, {true, 1}},
                {show_econnreset, true},
                {active, once}
            ]}
        ]},

        %% Ranch Example 3
        %% IPv4
        %% active false example, All messages are queued, until
        %% the the option active is set to once, true or {active, X :: int}
        {protocol,[
            {type, ranch_tcp_ipv4},
            {unique_reference, ranch_tcp_ipv4_3},
            {tcp_v4_port, 9902},
            {num_acceptors, 10},
            {socket_opts, [
                {packet, 2},
                {delay_send, false},
                {keepalive, true},
                {linger, {true, 1}},
                {show_econnreset, true},
                {active, false}
            ]}
        ]}

        % {protocol,[
        %     {type, tcp_v4_socket},
        %     {tcp_v4_port, 8888},
        %     {listen_opts,
        %         [binary,
        %          {packet, raw},
        %          {active, false},
        %          {reuseaddr, true},
        %          {ip,{0,0,0,0}}
        %         ]
        %     }
        % ]},
        % {protocol,[
        %     {type, http},
        %     {http_port, 9999}
        % ]}
    ]},
    {proc_buff, [
        {amqp,[
            {connection,[
                {type, network},
                {username, <<"guest">>},
                {passwd, <<"guest">>},
                {vhost, <<"/">>},
                {host, "127.0.0.1"},
                {port, 5672}
            ]}
        ]}
    ]}
 ]},

 {proc,[
    {proc_buff, [
        {amqp,[
            {connection,[
                {type, network},
                {username, <<"guest">>},
                {passwd, <<"guest">>},
                {vhost, <<"/">>},
                {host, "127.0.0.1"},
                {port, 5672}
            ]}
        ]}
    ]},
   {out_buff,[
    {amqp,[
            {connection,[
                {type, network},
                {username, <<"guest">>},
                {passwd, <<"guest">>},
                {vhost, <<"/">>},
                {host, "127.0.0.1"},
                {port, 5672}
            ]}
        ]}
   ]}
 ]},

  {out,[
    {outgoing_protocols,[
    {protocol,[
            {type, tcp_v4_socket},
        {tcp_v4_host, "127.0.0.1"},
            {tcp_v4_port, 9999},
            {connect_opts, [binary,{packet, raw}]}
        ]}
        %%{protocol,[
        %%    {type, http},
        %%    {http_port, 9999}
    %%    {out_url, "http:out.com"}
        %%]}
    ]},
    {out_buff, [
        {amqp,[
            {connection,[
                {type, network},
                {username, <<"guest">>},
                {passwd, <<"guest">>},
                {vhost, <<"/">>},
                {host, "127.0.0.1"},
                {port, 5672}
            ]}
        ]}
    ]}
 ]},

 {lager, [
   {log_root, "log/"},
   {handlers, [
     {lager_console_backend, info},
     {lager_file_backend, [{file, "error.log"}, {level, error}]},
     {lager_file_backend, [{file, "console.log"}, {level, info}]}
   ]}
 ]},

 {sasl, [
         {sasl_error_logger, {file, "log/sasl-error.log"}},
         {errlog_type, error},
         {error_logger_mf_dir, "log/sasl"},      % Log directory
         {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
         {error_logger_mf_maxfiles, 5}           % 5 files max
        ]}

].